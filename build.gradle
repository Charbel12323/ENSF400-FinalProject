buildscript {
  repositories {
    maven {
      url "https://plugins.gradle.org/m2/"
    }
  }
  dependencies {
    // https://plugins.gradle.org/plugin/com.github.spacialcircumstances.gradle-cucumber-reporting
    classpath "com.github.spacialcircumstances:gradle-cucumber-reporting:0.1.23"
  }
}

plugins {
    id 'war'
    id 'org.gretty' version '4.1.6'
    id "org.flywaydb.flyway" version "6.0.8"
    id "org.sonarqube" version "3.0"
    id 'jacoco'
    id "com.dorongold.task-tree" version "1.4"
    id 'info.solidsoft.pitest' version '1.5.1'
    id "org.owasp.dependencycheck" version "6.1.6"
    id 'org.hidetake.ssh' version '2.10.1'
    id "org.checkerframework" version "0.5.0"
    id "java-library"
}

java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(17))
    }
}

javadoc {
    options.overview = "src/main/javadoc/overview.html"
}

repositories {
    mavenCentral()
    jcenter()
}

apply plugin: "com.github.spacialcircumstances.gradle-cucumber-reporting"
apply plugin: 'org.checkerframework'
apply from: "$rootDir/gradle/integration_tests.gradle"
apply from: "$rootDir/gradle/cucumber_bdd_tests.gradle"
apply from: "$rootDir/gradle/remote_actions.gradle"
//apply from: "$rootDir/gradle/selenified_tests.gradle"

tasks.withType(JavaCompile) {
    options.compilerArgs << "-Xlint:unchecked"
}

// Checker configuration (currently commented out)
//checkerFramework {
//    checkers = [
//            'org.checkerframework.checker.nullness.NullnessChecker',
//    ]
//}

gretty {
    httpPort = 8080
    servletContainer = 'tomcat10'
    contextPath = "demo"
    def jacocoAgent = zipTree(configurations.jacocoAgent.singleFile)
                      .filter { it.name == "jacocoagent.jar" }
                      .singleFile
    jvmArgs = ["-javaagent:$jacocoAgent=output=tcpserver,address=localhost,port=6300",
               '-Dcom.sun.management.jmxremote',
               '-Dcom.sun.management.jmxremote.port=9999',
               '-Dcom.sun.management.jmxremote.ssl=false',
               '-Dcom.sun.management.jmxremote.authenticate=false']
}

repositories {
    jcenter()
    mavenCentral()
}

configurations {
    localDeps
}

dependencies {
    providedCompile 'javax.servlet:javax.servlet-api:4.0.1'
    testImplementation 'junit:junit:4.13.2'
    testImplementation 'org.mockito:mockito-core:5.3.1'
    implementation 'me.gosimple:nbvcxz:1.5.0'
    testImplementation 'nl.jqno.equalsverifier:equalsverifier:3.14'
    testImplementation 'io.cucumber:cucumber-java:7.11.0'
    testImplementation 'io.cucumber:cucumber-junit:7.11.0'
    implementation 'org.apache.commons:commons-lang3:3.12.0'
    implementation 'org.apache.logging.log4j:log4j-api:2.20.0'
    implementation 'org.apache.logging.log4j:log4j-core:2.20.0'
    implementation 'org.apache.logging.log4j:log4j-slf4j-impl:2.20.0'
    localDeps 'com.h2database:h2:2.1.214'
    implementation configurations.localDeps
    implementation 'org.flywaydb:flyway-core:9.17.0'
    implementation 'net.bull.javamelody:javamelody-core:1.93.0'
    
    // Update WebDriverManager for UI tests if applicable:
    testImplementation("io.github.bonigarcia:webdrivermanager:5.3.2")
}

pitest {
    targetClasses = [
        'com.coveros.training.authentication.RegisterServlet',
        'com.coveros.training.authentication.RegisterServletTests',
        'com.coveros.training.library.LibraryUtils',
        'com.coveros.training.library.LibraryUtilsTests'
    ]
    threads = 4
    outputFormats = ['XML', 'HTML']
    timestampedReports = false
}

tasks.getByName('pitest').finalizedBy 'printReportPathsPitest'

task('printReportPathsPitest') {
    doLast {
        print "\n\n\n"
        println "------------------------------------------------------------"
        println "Reports were generated by the tests."
        println "------------------------------------------------------------"
        println ""
        println "PiTest:   build/reports/pitest/index.html"
        println "------------------------------------------------------------"
        print "\n"
    }
}

task('coveros') {
    doLast {
      String fileContents = new File('docs/coveros_text.txt').text
      print fileContents
    }
}

check.finalizedBy 'printReportPathsCheck'

task('printReportPathsCheck') {
    doLast {
        print "\n\n\n"
        println "------------------------------------------------------------"
        println "Reports were generated by the tests."
        println "------------------------------------------------------------"
        println ""
        println "Coverage:   build/reports/jacoco/test/html/index.html"
        println "BDD Report: build/reports/bdd/cucumber-html-report-basic/index.html"
        println "Unit Tests: build/reports/tests/"
        println "------------------------------------------------------------"
        print "\n"
    }
}

task('printReportPathsDependencyCheck') {
    doLast {
        print "\n\n\n"
        println "---------------------------------------------------------------"
        println "Reports were generated by the tests."
        println "---------------------------------------------------------------"
        println ""
        println "Dependency Check: build/reports/dependency-check-report.html"
        println "---------------------------------------------------------------"
        print "\n"
    }
}

dependencyCheck {
    // Prevent H2 from auto-closing by adding DB_CLOSE_ON_EXIT=FALSE
    data {
        connectionUrl = "jdbc:h2:file:${project.buildDir}/dependency-check-data;DB_CLOSE_ON_EXIT=FALSE"
    }
    scanConfigurations = ['default']
    showSummary = false
    autoUpdate = true
    cveValidForHours = 24 * 30 * 12 // about a year.
    format = 'HTML'
    failBuildOnCVSS = 8
}

dependencyCheckAnalyze.finalizedBy 'printReportPathsDependencyCheck'

jacocoTestReport {
    executionData(fileTree(dir: "$buildDir/jacoco", include: '*.exec'))
    reports {
        xml.enabled true
        csv.enabled false
        xml.destination file("${buildDir}/jacoco/jacoco.xml")
        html.destination file("${buildDir}/reports/jacoco")
    }
}

check.dependsOn(jacocoTestReport)

sonarqube {
    properties {
        property "sonar.projectKey", project.findProperty("projectname") ?: "defaultKey"
        property "sonar.projectName", project.findProperty("projectname") ?: "Default Project Name"
        property "sonar.projectDescription", "A demonstration of a web application with good test coverage and best practices"
        property "sonar.sources", "src/main/java"
        property "sonar.tests", "src/test/java,src/integration_test/java,src/bdd_test/java"
        property "sonar.java.binaries", "build/classes/java/main"
        property "sonar.junit.reportPaths", "build/test-results/test/,build/test-results/integrate"
        property "sonar.coverage.jacoco.xmlReportPaths", "build/jacoco/jacoco.xml"
        property "sonar.host.url", project.findProperty("sonar.host.url") ?: "http://localhost:9000"
        property "sonar.token", project.findProperty("sonar.token") ?: ""
    }
}

tasks.withType(Test) {
    maxParallelForks = Runtime.runtime.availableProcessors().intdiv(2) ?: 1
    failFast = true
}

task runApiTests(type: Exec) {
    doFirst {
        checkIfAlive()
    }
    workingDir 'src/api_tests'
    commandLine 'pipenv', 'run', 'pytest', '--junitxml', '../../build/test-results/api_tests/TEST-api_test_results.xml'
}

static boolean SearchDirectoryForChromedriver(File dir) {
    return dir.listFiles({ file -> file.name.contains("chromedriver") } as FileFilter).any()
}

static boolean ScanPathForChromeDriver() {
    List pathDirectories = System.getenv('PATH').split("[;|:]").toList()
    pathDirectories.add("ui_tests")
    return pathDirectories.any({ dir -> SearchDirectoryForChromedriver(new File(dir)) })
}

task('writeGitCommitToFile') {
    File file = new File("src/main/webapp/commit.html")
    file.write(getCurrentGitHash())
}

static String getCurrentGitHash() {
    String headFileLocation = ".git/HEAD"
    String commitLocation
    int locationOfSpace
    String currentHead
    FileReader fr_forGitHead
    FileReader fr_forGitHash
    String result
    boolean shouldExit = false

    try {
        fr_forGitHead = new FileReader(headFileLocation)
    } catch (Exception ignored) {
        return "NO_GIT_HEAD_FOUND"
    }

    new BufferedReader(fr_forGitHead).with { br ->
        result = "EMPTY_INITIAL_VALUE"
        try {
            currentHead = br.readLine()
        } catch (Exception ignored) {
            result = "COULD_NOT_READ_HEAD_FILE"
            shouldExit = true
        } finally {
            br.close()
        }
        locationOfSpace = currentHead.indexOf(" ")
        commitLocation = currentHead.substring(locationOfSpace + 1)
    }
    if (shouldExit) {
        return result
    }

    try {
        fr_forGitHash = new FileReader(".git/" + commitLocation)
    } catch (Exception ignored) {
        return "NO_GIT_HASH_FILE_FOUND"
    }

    new BufferedReader(fr_forGitHash).with { br ->
        result = "EMPTY_AT_BEGINNING"
        try {
            result = br.readLine()
        } catch (Exception ignored) {
            result = "COULD_NOT_READ_COMMIT_HASH"
        } finally {
            br.close()
        }
    }
    return result
}

compileJava.finalizedBy writeGitCommitToFile

static void checkIfAlive() {
    int code
    try {
        URL url = new URL("http://demo-app:8080/demo")
        HttpURLConnection connection = (HttpURLConnection) url.openConnection()
        connection.setRequestMethod("GET")
        connection.connect()
        code = connection.getResponseCode()
    } catch (Exception ignored) {
        String errorMsg = "\n\n\n" +
                "****************************************\n" +
                "*       SERVER IS NOT RUNNING          *\n" +
                "****************************************\n" +
                " The server has to be running to run    \n" +
                " tests you requested                    \n" +
                "                                        \n" +
                " To start the app:                      \n" +
                "    gradlew apprun                      \n" +
                "****************************************\n"
        throw new Exception(errorMsg)
    }
    if (code != 200) {
        throw new Exception("\n\nServer is not returning a 200. Instead, it is: " + code + "\n\n")
    }
}

void waitForHeartbeat() {
    int code = 0
    while (code != 200){
        try {
            URL url = new URL("http://demo-app:8080/demo")
            HttpURLConnection connection = (HttpURLConnection) url.openConnection()
            connection.setRequestMethod("GET")
            connection.connect()
            code = connection.getResponseCode()
            if (code != 200) {
                logger.error("\nServer response is: " + code + ". Waiting 2 seconds")
                sleep 2
            } else {
                logger.info("\nServer is awake")
            }
        } catch (Exception ignored) {
            logger.error("\nServer failed to connect. Waiting 2 seconds")
            sleep 2
        }
    }
}

task waitForHeartbeatTask() {
    doLast {
        waitForHeartbeat()
    }
}

task checkQualityGate() {
    doLast {
        isQualityGateGood()
    }
}

static void isQualityGateGood() {
    String sonarUrl = "http://sonarqube:9000/api/qualitygates/project_status?projectKey=ENSF400"
    String token = "squ_1ac3870402b8cf9ae40e9f4edd7e898f067501f5"
    try {
        URL url = new URL(sonarUrl)
        HttpURLConnection connection = (HttpURLConnection) url.openConnection()
        connection.setRequestMethod("GET")
        String authString = token + ":" 
        String basicAuth = "Basic " + authString.bytes.encodeBase64().toString()
        connection.setRequestProperty("Authorization", basicAuth)
        connection.connect()
        int code = connection.getResponseCode()
        if (code != 200) {
            throw new GradleException("response from Sonar was " + code)
        }
        BufferedReader br = new BufferedReader(new InputStreamReader(connection.getInputStream()))
        String strCurrentLine
        while ((strCurrentLine = br.readLine()) != null) {
            print(strCurrentLine)
            if (strCurrentLine.startsWith("{\"projectStatus\":{\"status\":\"ERROR\"")) {
                throw new GradleException("The quality gate for Demo on Sonarqube failed. Check Sonarqube.")
            }
        }
        br.close()
    } catch (IOException e) {
        throw new GradleException("Failed to check quality gate. " + e.getMessage(), e)
    }
}

task runApiTests(type: Exec) {
    doFirst {
        checkIfAlive()
    }
    workingDir 'src/api_tests'
    commandLine 'pipenv', 'run', 'pytest', '--junitxml', '../../build/test-results/api_tests/TEST-api_test_results.xml'
}

static boolean SearchDirectoryForChromedriver(File dir) {
    return dir.listFiles({ file -> file.name.contains("chromedriver") } as FileFilter).any()
}

static boolean ScanPathForChromeDriver() {
    List pathDirectories = System.getenv('PATH').split("[;|:]").toList()
    pathDirectories.add("ui_tests")
    return pathDirectories.any({ dir -> SearchDirectoryForChromedriver(new File(dir)) })
}

task('writeGitCommitToFile') {
    File file = new File("src/main/webapp/commit.html")
    file.write(getCurrentGitHash())
}

static String getCurrentGitHash() {
    String headFileLocation = ".git/HEAD"
    String commitLocation
    int locationOfSpace
    String currentHead
    FileReader fr_forGitHead
    FileReader fr_forGitHash
    String result
    boolean shouldExit = false
    try {
        fr_forGitHead = new FileReader(headFileLocation)
    } catch (Exception ignored) {
        return "NO_GIT_HEAD_FOUND"
    }
    new BufferedReader(fr_forGitHead).with { br ->
        result = "EMPTY_INITIAL_VALUE"
        try {
            currentHead = br.readLine()
        } catch (Exception ignored) {
            result = "COULD_NOT_READ_HEAD_FILE"
            shouldExit = true
        } finally {
            br.close()
        }
        locationOfSpace = currentHead.indexOf(" ")
        commitLocation = currentHead.substring(locationOfSpace + 1)
    }
    if (shouldExit) {
        return result
    }
    try {
        fr_forGitHash = new FileReader(".git/" + commitLocation)
    } catch (Exception ignored) {
        return "NO_GIT_HASH_FILE_FOUND"
    }
    new BufferedReader(fr_forGitHash).with { br ->
        result = "EMPTY_AT_BEGINNING"
        try {
            result = br.readLine()
        } catch (Exception ignored) {
            result = "COULD_NOT_READ_COMMIT_HASH"
        } finally {
            br.close()
        }
    }
    return result
}

compileJava.finalizedBy writeGitCommitToFile

task copyH2JarToLib(type: Copy) {
    from configurations.localDeps
    into "$buildDir/lib"
}

task startH2Console(type: Exec) {
    dependsOn 'copyH2JarToLib'
    commandLine 'javaw', '-cp', 'build/lib/h2-1.4.199.jar', 'org.h2.tools.Console'
}

task runBehaveTests(type: Exec) {
    doFirst {
        checkIfAlive()
        def chromedriver_exists_in_ui_tests = ScanPathForChromeDriver()
		def chrm = project.properties['chromedriver.path']
		def chromedriver_full_path_empty = chrm == null || chrm.isEmpty()
        if (chromedriver_full_path_empty) {
            chrm = "(NOT SET)"
        }
        if (!chromedriver_exists_in_ui_tests && chromedriver_full_path_empty) {
            ignoreExitValue true
            throw new Exception(
					"\n\n*****************************************************\n" +
					"*****************************************************\n" +
					"Does not look like you have Chromedriver on your \n" +
					"PATH or have set the full directory in gradle.properties.\n\n" +
					"Download it from http://chromedriver.chromium.org/\n" +
					"*****************************************************\n" +
					"*****************************************************\n" +
					"\n\nMore detail:\n  We couldn't find Chromedriver, which is needed to run the \n" +
					"  Behave tests (The UI-focused Behavior Driven Development test)\n" +
					"\nThe easiest way to fix this, once you have downloaded Chromedriver, \n" +
					"is to move the Chromedriver executable into a directory that is in \n" +
					"your path.\n" +
                    "\nFor your reference, here are all the directories we checked:\n\n" +
					System.getenv('PATH') +
					"\n\nAn alternate way is to set the path to the Chromedriver executable\n" +
					"in the gradle.properties file, at chromedriver.path\n" +
					"\nFor example: \n" +
					"\nchromedriver.path=C:/foo/bar/chromedriver_win32/chromedriver.exe\n" +
                    "\n\nHere is the value of your \"chromedriver.path\" \n(found in gradle.properties): \n\n" +
					chrm +
                    "\n\nIMPORTANT MESSAGES ABOVE! SCROLL UP."
            )
        }
    }
    workingDir 'src/ui_tests/behave'
    environment "PIPENV_MAX_DEPTH", "10"
    commandLine 'pipenv', 'run', 'behave', '--format','json','-o','../../../build/bdd/behave.output', '-D', 'chromedriver_path='+(project.properties['chromedriver.path'] ?: "")
}

task convertBehaveOutputToCucumber(type: Exec) {
    commandLine 'pipenv', 'run', 'python', '-m', 'behave2cucumber', '-i', 'build/bdd/behave.output', '-o', 'build/bdd/behave_cucumber_style.json'
}
runBehaveTests.finalizedBy convertBehaveOutputToCucumber

task runAllTests(type: GradleBuild) {
    doFirst {
        checkIfAlive()
    }
    tasks = ['check', 'runApiTests', 'runBehaveTests']
    finalizedBy(jacocoTestReport)
}

test {
    testLogging {
        exceptionFormat "full"
        events "passed", "skipped", "failed", "standardOut", "standardError"
        showExceptions true
        showStandardStreams true
    }
    failFast = true
    debugOptions {
        enabled = false
        port = 4455
        server = true
        suspend = true
    }
    finalizedBy jacocoTestReport
}

dependencyCheck {
    data {
        connectionUrl = "jdbc:h2:file:${project.buildDir}/dependency-check-data;DB_CLOSE_ON_EXIT=FALSE"
    }
    scanConfigurations = ['default']
    showSummary = false
    autoUpdate = true
    cveValidForHours = 24 * 30 * 12
    format = 'HTML'
    failBuildOnCVSS = 8
}

task('printReportPathsCheck') {
    doLast {
        print "\n\n\n"
        println "------------------------------------------------------------"
        println "Reports were generated by the tests."
        println "------------------------------------------------------------"
        println ""
        println "Coverage:   build/reports/jacoco/test/html/index.html"
        println "BDD Report: build/reports/bdd/cucumber-html-report-basic/index.html"
        println "Unit Tests: build/reports/tests/"
        println "------------------------------------------------------------"
        print "\n"
    }
}

task('printReportPathsDependencyCheck') {
    doLast {
        print "\n\n\n"
        println "---------------------------------------------------------------"
        println "Reports were generated by the tests."
        println "---------------------------------------------------------------"
        println ""
        println "Dependency Check: build/reports/dependency-check-report.html"
        println "---------------------------------------------------------------"
        print "\n"
    }
}

dependencyCheckAnalyze.finalizedBy 'printReportPathsDependencyCheck'

jacocoTestReport {
    executionData(fileTree(dir: "$buildDir/jacoco", include: '*.exec'))
    reports {
        xml.enabled true
        csv.enabled false
        xml.destination file("${buildDir}/jacoco/jacoco.xml")
        html.destination file("${buildDir}/reports/jacoco")
    }
}

check.dependsOn(jacocoTestReport)

sonarqube {
    properties {
        property "sonar.projectKey", project.findProperty("projectname") ?: "defaultKey"
        property "sonar.projectName", project.findProperty("projectname") ?: "Default Project Name"
        property "sonar.projectDescription", "A demonstration of a web application with good test coverage and best practices"
        property "sonar.sources", "src/main/java"
        property "sonar.tests", "src/test/java,src/integration_test/java,src/bdd_test/java"
        property "sonar.java.binaries", "build/classes/java/main"
        property "sonar.junit.reportPaths", "build/test-results/test/,build/test-results/integrate"
        property "sonar.coverage.jacoco.xmlReportPaths", "build/jacoco/jacoco.xml"
        property "sonar.host.url", project.findProperty("sonar.host.url") ?: "http://localhost:9000"
        property "sonar.token", project.findProperty("sonar.token") ?: ""
    }
}

tasks.withType(Test) {
    maxParallelForks = Runtime.runtime.availableProcessors().intdiv(2) ?: 1
    failFast = true
}

task runPerfTests(type: Exec) {
    workingDir '.'
    commandLine 'jmeter.bat', '-f', '-n', '-t', 'docs\\performance_testing\\50_users_at_once.jmx', '-l', 'build\\jmeter_perf_test.csv', '-e', '-o', 'build\\reports\\perf_report'
    standardOutput = new ByteArrayOutputStream()
    ext.output = { return standardOutput.toString() }
}