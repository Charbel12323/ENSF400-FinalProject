pipeline {
  agent any

  triggers {
    githubPush()
  }

  environment {
    HTTP_PROXY = 'http://zap:8080'
    NO_PROXY   = 'demo-app'
  }

  stages {
    // 1. Container Build Stage
    stage('Container Build') {
      // Run on pull requests (CHANGE_ID set) and master branch
      when {
        anyOf {
          expression { return env.CHANGE_ID != null }
          branch 'master'
        }
      }
      steps {
        script {
          // For pull requests, build only; for master branch, build and push.
          if (env.CHANGE_ID) {
            echo "Building Docker image (PR build): ${GIT_COMMIT}"
            sh "docker build -t charbel123456/ensf400-finalproject:${GIT_COMMIT} ."
          } else {
            echo "Building and pushing Docker image (master branch): ${GIT_COMMIT}"
            sh "docker build -t charbel123456/ensf400-finalproject:${GIT_COMMIT} ."
            withCredentials([usernamePassword(credentialsId: 'docker-hub-credentials',
                                              usernameVariable: 'DOCKERHUB_USERNAME',
                                              passwordVariable: 'DOCKERHUB_TOKEN')]) {
              sh 'docker login -u "$DOCKERHUB_USERNAME" -p "$DOCKERHUB_TOKEN"'
            }
            sh "docker push charbel123456/ensf400-finalproject:${GIT_COMMIT}"
          }
        }
      }
    }

    // 2. Unit Tests Stage
    stage('Unit Tests') {
      // Run on pull requests and master branch
      when {
        anyOf {
          expression { return env.CHANGE_ID != null }
          branch 'master'
        }
      }
      steps {
        echo "Running unit tests..."
        sh './gradlew test'
      }
      post {
        always {
          junit 'build/test-results/test/*.xml'
        }
      }
    }

    // 3. SonarQube Static Analysis Stage
    stage('Static Analysis') {
      // Run on pull requests and master branch
      when {
        anyOf {
          expression { return env.CHANGE_ID != null }
          branch 'master'
        }
      }
      steps {
        echo "Starting SonarQube analysis..."
        sh './gradlew sonarqube'
        // Give SonarQube time to process the report before checking the gate.
        sleep 5
        sh './gradlew checkQualityGate'
      }
    }

    // Additional stages will run only on the master branch
    stage('Database Tests') {
      when {
        branch 'master'
      }
      steps {
        sh './gradlew integrate'
      }
      post {
        always {
          junit 'build/test-results/integrate/*.xml'
        }
      }
    }

    stage('BDD Tests') {
      when {
        branch 'master'
      }
      steps {
        sh './gradlew generateCucumberReports'
        sh './gradlew jacocoTestReport'
      }
      post {
        always {
          junit 'build/test-results/bdd/*.xml'
        }
      }
    }

    stage('Deploy to Test') {
      when {
        branch 'master'
      }
      steps {
        sh './gradlew deployToTestWindowsLocal'
        sh 'PIPENV_IGNORE_VIRTUALENVS=1 pipenv install'
        sh './gradlew waitForHeartBeat'
        sh 'curl "http://zap:8080/JSON/core/action/newSession/?apikey=e02e6c167c1018f6f087f95a2d64e56c" -s --proxy zap:8080'
      }
    }

    stage('API Tests') {
      when {
        branch 'master'
      }
      steps {
        sh './gradlew runApiTests'
      }
      post {
        always {
          junit 'build/test-results/api_tests/*.xml'
        }
      }
    }

    stage('UI BDD Tests') {
      when {
        branch 'master'
      }
      environment {
        HTTP_PROXY = ''
      }
      steps {
        sh './gradlew runBehaveTests'
        sh './gradlew generateCucumberReport'
      }
      post {
        always {
          junit 'build/test-results/bdd_ui/*.xml'
        }
      }
    }

    stage('Clear WDM Cache') {
      when {
        branch 'master'
      }
      steps {
        echo "Attempting to clear WebDriverManager cache..."
        sh 'rm -rf jenkins_home/.cache/selenium || echo "Cache directory not found or could not be removed."'
        echo "WebDriverManager cache clearing attempt finished."
      }
    }

    stage('UI Tests') {
      when {
        branch 'master'
      }
      steps {
        sh '''
          cd src/ui_tests/java
          chmod +x gradlew
          ./gradlew clean test --refresh-dependencies        
        '''
      }
      post {
        always {
          junit 'src/ui_tests/java/build/test-results/test/*.xml'
        }
      }
    }

    stage('Security: Dependency Analysis') {
      when {
        branch 'master'
      }
      steps {
        sh './gradlew dependencyCheckAnalyze'
      }
    }

    stage('Performance Tests') {
      when {
        branch 'master'
      }
      steps {
        sh './gradlew runPerfTests'
      }
    }

    stage('Mutation Tests') {
      when {
        branch 'master'
      }
      steps {
        sh './gradlew pitest'
      }
    }

    stage('Build Documentation') {
      when {
        branch 'master'
      }
      steps {
        sh './gradlew javadoc'
      }
    }

    stage('Collect Zap Security Report') {
      when {
        branch 'master'
      }
      steps {
        sh 'mkdir -p build/reports/zap'
        sh 'curl "http://zap:8080/OTHER/core/other/htmlreport/?apikey=e02e6c167c1018f6f087f95a2d64e56c" --proxy zap:8080 > build/reports/zap/zap_report.html'
      }
    }

    stage('Deploy to Prod') {
      when {
        branch 'master'
      }
      steps {
        sh 'sleep 5'
      }
    }
  }

  post {
    success {
      echo "Pipeline completed successfully."
    }
    failure {
      echo "Pipeline failed."
    }
  }
}
